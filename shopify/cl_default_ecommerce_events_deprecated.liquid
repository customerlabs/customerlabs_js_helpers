<script>
  if(!window.jQuery){
    var jqueryScript = document.createElement('script');
    jqueryScript.setAttribute('src','https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js'); 
    document.head.appendChild(jqueryScript); 
  }
  
  var __DL__interval = setInterval(function() {
    
    if (window.jQuery && CLabsgbVar) {
      clearInterval(__DL__interval);

      if (CLabsgbVar.generalProps && CLabsgbVar.generalProps.uid) {
        getURLParams = function(name, url){
          if (!url) url = window.location.href;
          name = name.replace(/[\[\]]/g, "\\$&");
          var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
          results = regex.exec(url);
          if (!results) return null;
          if (!results[2]) return '';
          return decodeURIComponent(results[2].replace(/\+/g, " "));
        };

        // Modify according to website
        var searchFormSelector = 'form[action="/search"]';
        var searchInputSelector = '.search-bar__input';

        __DL__ = {
          dynamicCart: true,  // if cart is dynamic (meaning no refresh on cart add) set to true
          debug: false, // if true, console messages will be displayed
          cart: null,
          wishlist: null,
          removeCart: null
        };
          
        // Modify according to website
        customBindings = {
          cartTriggers: ['#AddToCart'],
          viewCart: ['#ViewCart'],
          removeCartTrigger: ['.cart__remove'],
          cartVisableSelector: [],
          promoSubscriptionsSelectors: [],
          promoSuccess: [],
          ctaSelectors: [],
          newsletterSelectors: [],
          newsletterSuccess: [],
          searchPage: [],
          wishlistSelector: ["#wish-list"],
          removeWishlist: [],
          wishlistPage: [],
          searchTermQuery: [getURLParams('q')] // replace var with correct query
        };

        /* DO NOT EDIT */
        defaultBindings = {
          cartTriggers: ['form[action="/cart/add"] [type="submit"],.add-to-cart,.cart-btn'],
          viewCart: ['form[action="/cart"],.my-cart,.trigger-cart,#mobileCart'],
          removeCartTrigger: ['[href*="/cart/change"]'],
          cartVisableSelector: ['.inlinecart.is-active,.inline-cart.is-active'],
          promoSubscriptionsSelectors: [],
          promoSuccess: [],
          ctaSelectors: [],
          newsletterSelectors: ['input.contact_email'],
          newsletterSuccess: ['.success_message'],
          searchPage: ['search'],
          wishlistSelector: [],
          removeWishlist: [],
          wishlistPage: []
        };

        // stitch bindings
        objectArray = customBindings;
        outputObject = __DL__;

        applyBindings = function(objectArray, outputObject){
          for (var x in objectArray) {  
            var key = x;
            var objs = objectArray[x]; 
            values = [];    
            if(objs.length > 0){    
              values.push(objs);
              if(key in outputObject){              
                values.push(outputObject[key]); 
                outputObject[key] = values.join(", "); 
              }else{        
                outputObject[key] = values.join(", ");
              }   
            }  
          }
        };

        applyBindings(customBindings, __DL__);
        applyBindings(defaultBindings, __DL__);

        // jquery-cookies.js
        if(typeof $.cookie!==undefined){(function(a){if(typeof define==='function'&&define.amd){define(['jquery'],a)}else if(typeof exports==='object'){module.exports=a(require('jquery'))}else{a(jQuery)}}(function($){var g=/\+/g;function encode(s){return h.raw?s:encodeURIComponent(s)}function decode(s){return h.raw?s:decodeURIComponent(s)}function stringifyCookieValue(a){return encode(h.json?JSON.stringify(a):String(a))}function parseCookieValue(s){if(s.indexOf('"')===0){s=s.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,'\\')}try{s=decodeURIComponent(s.replace(g,' '));return h.json?JSON.parse(s):s}catch(e){}}function read(s,a){var b=h.raw?s:parseCookieValue(s);return $.isFunction(a)?a(b):b}var h=$.cookie=function(a,b,c){if(arguments.length>1&&!$.isFunction(b)){c=$.extend({},h.defaults,c);if(typeof c.expires==='number'){var d=c.expires,t=c.expires=new Date();t.setMilliseconds(t.getMilliseconds()+d*864e+5)}return(document.cookie=[encode(a),'=',stringifyCookieValue(b),c.expires?'; expires='+c.expires.toUTCString():'',c.path?'; path='+c.path:'',c.domain?'; domain='+c.domain:'',c.secure?'; secure':''].join(''))}var e=a?undefined:{},cookies=document.cookie?document.cookie.split('; '):[],i=0,l=cookies.length;for(;i<l;i++){var f=cookies[i].split('='),name=decode(f.shift()),cookie=f.join('=');if(a===name){e=read(cookie,b);break}if(!a&&(cookie=read(cookie))!==undefined){e[name]=cookie}}return e};h.defaults={};$.removeCookie=function(a,b){$.cookie(a,'',$.extend({},b,{expires:-1}));return!$.cookie(a)}}))}

        var template = "{{template}}"; 
  
        /** Blog Articles */

        {% if template contains 'article' %}
        var customProperties = {
          'page_url' : {
            't' : 'string',
            'v' : {{ article.url }}
          },
          'page_title' : {
            't' : 'string',
            'v' : {{ article.title }}
          }
        };

        var propertiesToSend = {
          'customProperties': customProperties
        };
          
        _cl.pageview("Pageview", propertiesToSend);
          
        {% endif %}

        /** Product Page
        * Fire on all Product View pages. */

        if (template.match(/.*product.*/gi) && !template.match(/.*collection.*/gi)) {     
          sku = '';
          var product = {
            'products': [{
              'id'              : {{product.id | json}},
              'sku'             : {{product.selected_variant.sku | json}},
              'variantId'       : {{product.selected_variant.id | json}},
              'productType'     : {{product.type | json}},
              'name'            : {{product.title | json}},
              'price'           : {{product.price | money_without_currency | remove: "," | json}},
              'description'     : {{product.description | strip_newlines | strip_html | json}},
              'imageURL'        : "https:{{product.featured_image.src|img_url:'grande'}}", 
              'productURL'      : '{{shop.secure_url}}{{product.url}}',
              'brand'           : {{shop.name | json}},              
              'comparePrice'    : {{product.compare_at_price_max | money_without_currency | remove: "," | json}},
              'categories'      : {{product.collections | map:"title" | json}},
              'currentCategory' : {{collection.title | json}},
              'productOptions'  : {
                {% for option in product.options_with_values %}
                {% for value in option.values %}
                {% if option.selected_value == value %}
                {{option.name | json}} : {{value | json}},
                {% endif %}
                {% endfor %}
                {% endfor %}
              }
            }]
          };

          function productView(){
            var sku = {{product.selected_variant.sku | json}};

            var propertiesToSend = {
              'customProperties': {"content_type": "product_group"},
              'productProperties' : productsConversion(product.products)
            };
      
            _cl.pageview("Product viewed", propertiesToSend);
          }
          productView();

          $(__DL__.cartTriggers).click(function(){
            var skumatch = {{product.selected_variant.sku | json}};
            if(sku != skumatch){
              productView();
            }
          });

        }

        /** Category viewed*/
        
        {% if template contains 'collection' %}
        var customProperties = {
          'category_name' : {{collection.title | json}}
        };
          
        var propertiesToSend = {
          'customProperties': customProperties
        };
    
        _cl.pageview('Category viewed', propertiesToSend);
          
        {% endif %}
        
        /** Cart View */

        {% if template contains 'cart' %}

        var cart = {
          'products':[{% for line_item in cart.items %}{
            'id'       : {{line_item.product_id | json}},
            'sku'      : {{line_item.sku | json}},
            'variant'  : {{line_item.variant_id | json}},
            'name'     : {{line_item.title | json}},
            'price'    : {{line_item.price | money_without_currency | remove: "," | json}},
            'quantity' : {{line_item.quantity | json}}
          },{% endfor %}]
        };

        var propertiesToSend = {
          'productProperties' : productsConversion(cart.products)
        };
    
        _cl.pageview('Cart viewed', propertiesToSend);
    
        __DL__.cart = cart.products;
        $(__DL__.removeCartTrigger).on('click', function (event) {
          event.preventDefault();

          var valInd = $(this).attr('href')[18];
          var linkToRemove = $(this).attr('href');
          
          setTimeout(function(){
            // remove from cart
            jQuery.getJSON("/cart", function (response) {
              // get Json response 
              __DL__.removeCart = response;
              $.ajax({
                type: "POST",
                url: linkToRemove,
                contentType : "application/json;charset=utf-8",
                success: function(data) {
                  window.location.reload();
                },
                error: function(data) {
                  if (__DL__.debug) {
                    console.log("data",data.responseText);
                  }
                }
                
              })
              var productsToRemove = []
              productsToRemove.push(__DL__.removeCart.items[valInd-1])
              var finalProductConversion = productsConversion(productsToRemove)
              var finalResultProperties = {}
              finalResultProperties["productProperties"] = finalProductConversion
              
              var removeFromCart = {
                'products': __DL__.removeCart.items.map(function (line_item) {
                  return {
                    'id'       : line_item.product_id,
                    'sku'      : line_item.sku,
                    'variant'  : line_item.variant_id,
                    'name'     : line_item.title,
                    'price'    : (line_item.price/100),
                    'quantity' : line_item.quantity
                  }
                }),
                'pageType' : 'Remove from Cart',
                'event'    : 'Remove from Cart'         
              };
              __DL__.removeCart = removeFromCart;
              
              var cartIDs = [];
              var removeIDs = [];
              var removeCart = [];

              // remove from cart logic
              for(var i=__DL__.cart.length-1;i>=0;i--){var x=parseFloat(__DL__.cart[i].variant);cartIDs.push(x)}for(var i=__DL__.removeCart.products.length-1;i>=0;i--){var x=parseFloat(__DL__.removeCart.products[i].variant);removeIDs.push(x)}function arr_diff(b,c){var a=[],diff=[];for(var i=0;i<b.length;i++){a[b[i]]=true}for(var i=0;i<c.length;i++){if(a[c[i]]){delete a[c[i]]}else{a[c[i]]=true}}for(var k in a){diff.push(k)}return diff};var x=arr_diff(cartIDs,removeIDs)[0];for(var i=__DL__.cart.length-1;i>=0;i--){if(__DL__.cart[i].variant==x){removeCart.push(__DL__.cart[i])}}

              if (__DL__.debug) {
                console.log("Cart"+" :"+JSON.stringify(removeCart, null, " "));
              }

              _cl.trackClick("Removed from cart", finalResultProperties);
            });
          }, 500);
                    
                      
        });
    
        {% endif %}

        // Helper function
        function productsConversion(products) {
          var productsArr = products;
          var products = []
          for(let i = 0 ; i < productsArr.length ; i++) {
            var productsStructure = {}
            for(key in productsArr[i]) {
              switch(key) {
                case "name":
                case "title":
                  productsStructure["product_name"] = {"t": "string", "v": productsArr[i][key]}
                  break;
                case "id":
                  productsStructure["product_id"] = {"t": "string", "v": productsArr[i]["id"]}
                  break;
                case "price":
                  productsStructure["product_price"] = {"t": "number", "v": productsArr[i]["price"]}
                  break;
                case "category":
                  productsStructure["product_category"] = {"t": "string", "v": productsArr[i]["category"]}
                  break;
                case "brand":
                  productsStructure["product_brand"] = {"t": "string", "v": productsArr[i]["brand"]}
                  break;
                case "variant":
                  productsStructure["product_variant"] = {"t": "string", "v": productsArr[i]["variant"]}
                  break;
                case "variantId":
                  productsStructure["product_variant"] = {"t": "string", "v": productsArr[i]["variantId"]}
                  break;
                case "productType":
                  productsStructure["product_type"] = {"t": "string", "v": productsArr[i]["productType"]}
                  break;
                case "coupon":
                  productsStructure["product_coupon"] = {"t": "string", "v": productsArr[i]["coupon"]}
                  break;
                case "quantity":
                  productsStructure["product_quantity"] = {"t": "string", "v": productsArr[i]["quantity"]}
                  break;
                default:
                  let isnum = /^\d+$/.test(productsArr[i][key]);
                  var type = ""

                  if(Array.isArray(productsArr[i][key])) {
                    continue;
                  } else if(typeof productsArr[i][key] === 'object' && productsArr[i][key] !== null && !Array.isArray(productsArr[i][key])) {
                    continue;
                  } else if(productsArr[i][key] !== null && (Number.isFinite(productsArr[i][key]) || isnum || !isNaN(parseFloat(productsArr[i][key])))) {
                    type = "number"
                  }  else {
                    type = "string"
                  }
                  if(key.substring(0, 8) === "product_") {
                    productsStructure[key] = {"t": type, "v": productsArr[i][key]}
                  } else {
                    productsStructure["product_"+key] = {"t": type, "v": productsArr[i][key]}
                  }
              }
            }
            products.push(productsStructure);
          }
          return products
        }

        /** 
        * Checkout & Transaction Data */
        var __DL__products = [];
                  
        {% for line_item in checkout.line_items %}
                  
        __DL__products.push({
          'id'          : {{line_item.product_id | json}},
          'sku'         : {{line_item.sku | json}},
          'variantId'   : {{line_item.variant_id | json}},
          'name'        : {{line_item.title | json}},
          'productType' : {{line_item.product.type | json}},
          'price'       : {{line_item.price | money_without_currency | remove: "," | json}},
          'quantity'    : {{line_item.quantity | json}},
          'description' : {{line_item.product.description | strip_newlines | strip_html  | json }},
          'imageURL'    : "https:{{line_item.product.featured_image.src|img_url:'grande'}}", 
          'productURL'  : '{{shop.secure_url}}{{line_item.product.url}}'
        });
                  
        {% endfor %}
    
        var transactionData = {
          'transaction_id': {
            't': 'number',
            'v': {{checkout.order_id | json}}
          },
          'transaction_number': {
            't': 'number',
            'v': {{checkout.order_number | json}}
          },
          'transaction_affiliation': {
            't': 'string',
            'v': {{shop.name | json}}
          },
          'transaction_total': {
            't': 'number',
            'v': {{checkout.total_price | money_without_currency| remove: "," | json}}
          },
          'tax': {
            't': 'number',
            'v': {{checkout.tax_price | money_without_currency| remove: "," | json}}
          },
          'shipping_price': {
            't': 'number',
            'v': {{checkout.shipping_price | money_without_currency| remove: "," | json}}
          },
          'transactionSubtotal': {
            't': 'number',
            'v': {{checkout.subtotal_price | money_without_currency| remove: "," | json}}
          },
          {% for discount in checkout.discounts %}
          'promoCode': {
            't': 'string',
            'v': {{discount.code | json}}
          },
          'discount': {
            't': 'number',
            'v': {{discount.amount | money_without_currency | json}}
          },
          {% endfor %}

        };
            
        var productProperties = productsConversion(__DL__products);
        transactionData["content_type"] = "product_group";
        transactionData["currency"] = Shopify.currency.active;
        var propertiesToSend = {
          'customProperties': transactionData,
          'productProperties': productProperties
        };
    
        /** DATALAYER: Checkout */
        if(Shopify.Checkout){
            
          if(!document.location.pathname.match(/.*order.*/g) && !document.location.pathname.match(/.*thank_you.*/g)){
            
            _cl.trackClick('Checkout made', propertiesToSend);
          }
            
          if(Shopify.Checkout.step){ 
            if(Shopify.Checkout.step.length > 0){
              if (Shopify.Checkout.step === 'contact_information'){
            
              }else if (Shopify.Checkout.step === 'shipping_method'){
          
              }else if( Shopify.Checkout.step === "payment_method" ){

              }
            }
            
            if(Shopify.Checkout.page == "thank_you"){
            
              setTimeout(function() {
            
                _cl.trackClick('Purchased', propertiesToSend);
            
            }, 5000);
            
            }

          }
        }

        /*
        ** EVENT BINDINGS
        */

        $(document).ready(function() {
          /** Search Results */
          
          $(searchFormSelector).submit(function(event){
            event.preventDefault();
            
            var customProperties = {
              'Search string': {
                't': 'string',
                'v': $(searchInputSelector).val()
              }
            };
    
            var propertiesToSend = {
              'customProperties': customProperties
            };
                  
            _cl.trackSubmit("Search made", customProperties);
              
            window.location = window.location.origin + "/search?q=" + $(searchInputSelector).val();
            
          });
                
          /** Add to cart */
          $(__DL__.cartTriggers).click(function(event) {
            
            a2c();
            
          });
          
          function a2c() {
            var oldCart, newCart;
            
            jQuery.getJSON('/cart.js', function (response) {
              oldCart = response.items;
              
              setTimeout(function(){
                
                jQuery.getJSON('/cart.js', function (response2) {
                  newCart = response2.items;

                  if (newCart.length == 1) {
                  
                    var cp = {"content_type": "product_group"};
                    if(Shopify.currency && Shopify.currency.active){
                      cp["currency"] = Shopify.currency.active;
                    }
                    var clitem = newCart[0];
                    clitem.price = clitem.price / 100; 
                    var propertiesToSend = {
                      "customProperties": cp,
                      "productProperties": productsConversion([clitem])
                    };

                    _cl.trackClick("Added to cart", propertiesToSend);
                    
                  }
                  else {
                  
                    if (oldCart[0].id != newCart[0].id) {
                    
                      var cp = {"content_type": "product_group"};
                      if(Shopify.currency && Shopify.currency.active){
                        cp["currency"] = Shopify.currency.active;
                      }
                      var clitem = newCart[0];
                      clitem.price = clitem.price / 100;
                      var propertiesToSend = {
                        "customProperties": cp,
                        "productProperties": productsConversion([clitem])
                      };

                      _cl.trackClick("Added to cart", propertiesToSend);
                    
                    }
                    else {
                    
                      var isSent = false;
                      
                      for (var i = 0; i < oldCart.length; i++){
                        if (newCart[i].quantity != oldCart[i].quantity) {
                          var cp = {"content_type": "product_group"};
                          if(Shopify.currency && Shopify.currency.active){
                            cp["currency"] = Shopify.currency.active;
                          }
                          var clitem = newCart[i];
                          clitem.price = clitem.price / 100;
                          var propertiesToSend = {
                            "customProperties": cp,
                            "productProperties": productsConversion([clitem])
                          };

                          _cl.trackClick("Added to cart", propertiesToSend);
                          
                          isSent = true;

                          break;
                        }
                      }
                      
                      if ( ! isSent ) {
                        var cp = {"content_type": "product_group"};
                        if(Shopify.currency && Shopify.currency.active){
                          cp["currency"] = Shopify.currency.active;
                        }
                        var clitem = newCart[newCart.length-1];
                        clitem.price = clitem.price / 100;
                        
                        var propertiesToSend = {
                          "customProperties": cp,
                          "productProperties": productsConversion([clitem])
                        };

                        _cl.trackClick("Added to cart", propertiesToSend);
                      
                      }
                    
                    }
                  
                  }

                });
                
              }, 1000);
              
            });
          }
                
        });
      
      }
            
    }
  
  }, 2000);
</script>